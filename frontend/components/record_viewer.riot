<record-viewer class="pt-5 mr-5">
  <div class="container" if={state.item}>
    <div class="d-flex mb-6 d-print-none">
      <watchlist-toggle
        class="d-print-none"
        id={state.item.id()}
      />
      <a
        class="mr-2"
        onclick={event => print(event)}
        title={t('print_entry')}
      ><dfk-icon type="print" /></a>
      <a
        class="mr-2"
        onclick={event => download(event)}
        title={t('json_data')}
      ><dfk-icon type="braces" /></a>
      <a
        class="mr-2"
        href={dataFileUrl()}
        download
        title={t('download_dataset')}
      ><dfk-icon type="download" /></a>
    </div>

    <a class="close d-print-none" onclick={event => close(event)}>
      <dfk-icon type="cross" />
    </a>

    <div if={state.item} class="position-relative">
      <a
        class="previous d-print-none"
        if={props.firstId != state.item.id()}
        onclick={event => previous(event)}
      ><dfk-icon type="chevron-left" /></a>

      <a
        class="next d-print-none"
        if={props.lastId != state.item.id()}
        onclick={event => next(event)}
      ><dfk-icon type="chevron-right" /></a>
      
      <record item={state.item} />
    </div>
  </div>

  <dfk-popup class="json" open={state.popup} if={state.item}>
    <div class="m-6">
      <div class="d-flex justify-content-between">
        <div>Data</div>
        <a onclick={event => closeDownload(event)}>
          <dfk-icon type="cross" />
        </a>
      </div>

      <h2 class="mt-1">JSON</h2>
      <div>
        <pre><dfk-raw html={highlight(state.item.json(), 'javascript')} /></pre>
      </div>
    </div>
  </dfk-popup>

  <script>
    import javascript from 'highlight.js/lib/languages/javascript'
    import hljs from 'highlight.js/lib/core'

    import {Url, i18n, util} from '@wendig/lib'

    import Record from './record.riot'
    import DfkIcon from '@dfk-paris/frontend/src/components/icon.riot'
    import DfkPopup from '@dfk-paris/frontend/src/components/popup.riot'
    import DfkRaw from '@dfk-paris/frontend/src/components/raw.riot'
    import WatchlistToggle from './watchlist_toggle.riot'

    import search from '../lib/search.instance'
    import Item from '../lib/item'
    import config from '../lib/dotenv'

    hljs.registerLanguage('javascript', javascript)

    export default class {
      static components = {
        DfkIcon,
        DfkPopup,
        DfkRaw,
        Record,
        WatchlistToggle
      }

      constructor() {
        this.fetch = this.fetch.bind(this)
        this.t = i18n.translate
        this.cap = util.capitalize
      }

      onBeforeMount() {
        window.addEventListener('hashchange', this.fetch)
        this.fetch()
      }

      onUnmounted() {
        window.removeEventListener('hashchange', this.fetch)
      }

      fetch() {
        const id = parseInt(Url.current().hashPath().split('/')[2])
        search.record(id).then(data => {
          const record = data.results[0]
          const item = new Item(record)
          this.update({item})
        })
      }

      previous(event) {
        event.preventDefault()

        const id = this.state.item.id()
        this.props.toPreviousRecord(id)
      }

      next(event) {
        event.preventDefault()

        const id = this.state.item.id()
        this.props.toNextRecord(id)
      }

      primaryUrl() {
        return this.state.primaryUrl || this.state.item.imageUrl()
      }

      additionalUrls() {
        return this.state.item.additionalUrls()
      }

      dataFileUrl() {
        return `${config.STATIC_URL}/data.xlsx`
      }

      setPrimary(url) {
        this.update({primaryUrl: url})
      }

      close(event) {
        event.preventDefault()

        const url = Url.current()
        url.setHashPath('')
        url.apply()
      }

      print(event) {
        event.preventDefault()

        const selector = `link[rel='stylesheet'][href*='${config.STATIC_URL}']`
        const links = document.querySelectorAll(selector)
        let css = ''
        const promises = [...links].map(e => {
          const url = e.getAttribute('href')
          return fetch(url).then(r => r.text()).then(text => {
            css += `\n${text}`
          })
        })
        Promise.all(promises).then(datas => {
          console.log(css)
          util.printElement(this.root.parentElement, {css, print: true})
        })
      }

      download(event) {
        event.preventDefault()

        this.state.popup = !this.state.popup
        this.update()
      }

      closeDownload(event) {
        event.preventDefault()

        this.update({popup: false})
      }

      highlight(code, language) {
        return hljs.highlight(code, {language: language}).value
      }

      locale() {
        return i18n.locale
      }
    }
  </script>
</record-viewer>
