<search>
  <a
    class="dfkv-reset float-right fw-bold"
    href="#!"
  >{t('reset')}</a>
  <div class="dfk-sans-serif fw-bold mb-4">
    {cap(t('search_criteria'))}
  </div>

  <div
    if={props.results}
    is="range-control"
    on-inputs-changed={onInputDelayed}
    from={props.criteria['from']}
    to={props.criteria['to']}
    min={minAcquisitonDate()}
    max={maxAcquisitonDate()}
    bins={props.results.buckets.adate.buckets.map(e => e['doc_count'])}
    class="mb-4"
  />

  <div class="d-flex">
    <dfk-input
      placeholder={cap(t('fulltext_search'))}
      type="text"
      name="terms"
      update-handler={onInputDelayed}
      value={props.criteria.terms}
      class="flex-grow-2 mr-3"
    />

    <help-trigger class="mt-1" />
  </div>

  <div if={hasActiveFilters()} class="dfkv-active-filters">
    <div class="dfkv-bar"></div>
    <div class="dfk-sans-serif fw-bold my-4 fs-2">{cap(t('your_selection'))}</div>

    <dfk-active-filters
      criteria={props.criteria}
      params={['type', 'medium', 'technique', 'inventory', 'artist', 'collection', 'room', 'exact']}
      translate-keys={true}
      remove-filter={(param, value) => removeFilter(param, value)}
    />
  </div>

  <div class="dfk-sans-serif fw-bold my-6 fs-2">{cap(t('filters'))}</div>

  <dfk-facet
    if={props.results}
    name={cap(t('inventory'))}
    aggregation={props.results.buckets.inventory}
    add-filter={newFilter => addFilter(newFilter)}
    type={'inventory'}
    class="d-block mb-6"
    hide-counts={hideCounts()}
  />

  <room-facet
    if={props.results}
    name={cap(t('rooms'))}
    criteria={props.criteria}
    results={props.results}
    add-filter={newFilter => addFilter(newFilter)}
    type={'room'}
    class="d-block mb-6"
    hide-counts={hideCounts()}
  />

  <dfk-facet
    if={props.results}
    name={cap(t('type'))}
    aggregation={props.results.buckets.type}
    add-filter={newFilter => addFilter(newFilter)}
    type={'type'}
    class="d-block mb-6"
    hide-counts={hideCounts()}
    expand-threshold={6}
  />

  <dfk-facet
    if={props.results}
    name={cap(t('medium'))}
    aggregation={props.results.buckets.medium}
    add-filter={newFilter => addFilter(newFilter)}
    type={'medium'}
    class="d-block mb-6"
    hide-counts={hideCounts()}
    expand-threshold={6}
  />

  <dfk-facet
    if={props.results}
    name={cap(t('collection'))}
    aggregation={props.results.buckets.collection}
    add-filter={newFilter => addFilter(newFilter)}
    type={'collection'}
    class="d-block mb-6"
    hide-counts={hideCounts()}
    expand-threshold={6}
  />

  <current-map
    if={props.results}
    data={props.results}
    style="height: 300px; margin-top: 3em; margin-bottom: 3em"
  />

  <dfk-facet
    if={props.results}
    name={cap(t('artists'))}
    aggregation={props.results.buckets.artists}
    add-filter={newFilter => addFilter(newFilter)}
    type={'artist'}
    class="d-block mb-6"
    hide-counts={hideCounts()}
  />

  <script>
    import {util} from '@wendig/lib'

    export default class {

      onBeforeMount(props) {
        this.onInputDelayed = util.delay(props.onInput, 300)
      }

      hideCounts() {
        return this.hasActiveFilters() || !!this.props.criteria.terms
      }

      addFilter(value) {
        for (const [k, v] of Object.entries(value)) {
          let current = this.props.criteria[k]
          current = current ? current.split('|') : []
          const index = current.indexOf(v)

          if (index == -1) {
            current.push(v)
            this.props.onInput({[k]: current.join('|')})
          }
        }
      }

      removeFilter(value) {
        this.props.onInput(value)
      }

      hasActiveFilters() {
        const keys = [
          'type', 'technique', 'medium', 'collection', 'artist', 'inventory',
          'room', 'exact'
        ]

        for (const k of keys) {
          if (this.props.criteria[k]) return true
        }

        return false
      }

      minAcquisitonDate() {
        const years = this.props.results.buckets.adate.buckets.map(e => e['key'])

        return Math.min(...years)
      }

      maxAcquisitonDate() {
        const years = this.props.results.buckets.adate.buckets.map(e => e['key'])

        return Math.max(...years, 1793)
      }
    }
  </script>
</search>