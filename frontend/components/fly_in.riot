<fly-in class="d-print-none">
  <dfk-fly-in open={state.open}>
    <div class="fly-in-open h-100">
      <div class="h-100 d-flex align-items-center">
        <a
          class="ml-4"
          onclick={event => selfToggle(event)}
        >
          <dfk-icon type="arrow-right" />
        </a>
        <div class="h-100 w-100 pl-7 overflow-y-scroll">
          <h2 class="mt-7">{cap(t('help'))}</h2>

          <ul class="pl-0 ml-0 mt-6 mr-7 mb-7">
            <li>
              <div class="header fw-bold mb-3">{cap(t('inventories_and_rooms'))}</div>
              <div class="description" data-id="i_and_r"></div>
            </li>

            <li>
              <div class="description" data-id="dims"></div>

              <div class="mt-3 pt-3 mb-3">
                <size-indicator
                  wh={[80, 120]}
                  ref-height={170.0}
                  render-height={80}
                />
              </div>
            </li>

            <li>
              <div class="item">
                <dfk-icon type="book" />
              </div>
              <div class="description" data-id="book"></div>
            </li>

            <li>
              <div class="item">
                <dfk-icon type="print" />
              </div>
              <div class="description" data-id="print"></div>
            </li>
          </ul>
        </div>
      </div>
    </div>

    <div class="fly-in-closed">
      <div class="h-100 d-flex align-items-center p-2">
        <a
          class="ml-2"
          onclick={event => selfToggle(event)}
        >
          <dfk-icon type="arrow-left" />
        </a>
      </div>
    </div>
  </dfk-fly-in>

  <script>
    import DfkFlyIn from '@dfk-paris/frontend/src/components/fly_in.riot'
    import SizeIndicator from './size_indicator.riot'


    export default class {
      static components = {DfkFlyIn, SizeIndicator}

      constructor() {
        this.toggle = this.toggle.bind(this)
      }

      onMounted() {
        this.on('toggle-fly-in', this.toggle)

        const targets = this.root.querySelectorAll('[data-id]')
        for (const target of targets) {
          const id = target.getAttribute('data-id')
          const text = this.t(`help_${id}`)

          target.innerHTML = text
        }
      }

      selfToggle(event) {
        this.bus.emit('toggle-fly-in')
      }

      toggle(event) {
        event.preventDefault()

        this.update({open: !this.state.open})
      }
    }
  </script>
</fly-in>
